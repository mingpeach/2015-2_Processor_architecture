sim-outorder: SimpleScalar/Alpha Tool Set version 4.0 of December, 2001.
Copyright (C) 2000-2001 by The Regents of The University of Michigan.
Copyright (C) 1994-2001 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
This version of SimpleScalar is licensed for academic non-commercial use only.

sim: command line: sim-outorder -config ../../mase-alphalinux/config/func2.cfg ./gcc g23.i -o g23.s 

sim: simulation started @ Wed Dec  9 03:39:50 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -vr                   false # verbose registers operation
-trigger:inst               0 # trigger instruction for verbose operation
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst          1000000000 # maximum number of inst's to execute
-fastfwd           1000000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              8 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-fetch:mf_compat        false # optimistic misfetch recovery
-bpred                perfect # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               8 # instruction decode B/W (insts/cycle)
-issue:width                8 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-lsq:perfect            false # perfect memory disambiguation
-cache:dl1       dl1:256:64:2:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:1024:64:2:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   8 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  8 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 1000000000 insts **
/usr/include: Not a directory
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn             1000000000 # total number of instructions committed
sim_num_refs              451902129 # total number of loads and stores committed
sim_num_loads             290889858 # total number of loads committed
sim_num_stores         161012271.0000 # total number of stores committed
sim_num_branches          153449553 # total number of branches committed
sim_elapsed_time                633 # total simulation time in seconds
sim_inst_rate          1579778.8310 # simulation speed (in insts/sec)
sim_total_insn           1000000000 # total number of instructions executed
sim_total_refs            451902129 # total number of loads and stores executed
sim_total_loads           290889858 # total number of loads executed
sim_total_stores       161012271.0000 # total number of stores executed
sim_total_branches        153449553 # total number of branches executed
sim_cycle                 483686333 # total simulation time in cycles
sim_IPC                      2.0675 # instructions per cycle
sim_CPI                      0.4837 # cycles per instruction
sim_exec_BW                  2.0675 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.5168 # instruction per branch
IFQ_count                3808539053 # cumulative IFQ occupancy
IFQ_fcount                475944530 # cumulative IFQ full count
ifq_occupancy                7.8740 # avg IFQ occupancy (insn's)
ifq_rate                     2.0675 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.8085 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9840 # fraction of time (cycle's) IFQ was full
RUU_count                6421942256 # cumulative RUU occupancy
RUU_fcount                212457441 # cumulative RUU full count
ruu_occupancy               13.2771 # avg RUU occupancy (insn's)
ruu_rate                     2.0675 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.4219 # avg RUU occupant latency (cycle's)
ruu_full                     0.4392 # fraction of time (cycle's) RUU was full
LSQ_count                2916224165 # cumulative LSQ occupancy
LSQ_fcount                196300969 # cumulative LSQ full count
lsq_occupancy                6.0292 # avg LSQ occupancy (insn's)
lsq_rate                     2.0675 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.9162 # avg LSQ occupant latency (cycle's)
lsq_full                     0.4058 # fraction of time (cycle's) LSQ was full
sim_slip                10790068483 # total number of slip cycles
avg_sim_slip                10.7901 # the average slip between issue and retirement
misfetch_count                    0 # misfetch count
misfetch_only_count               0 # misfetch only count
recovery_count                    0 # recovery count
il1.accesses             1460592501 # total number of accesses
il1.hits                 1460351777 # total number of hits
il1.misses                   240724 # total number of misses
il1.replacements             238810 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0002 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0002 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses              161012263 # total number of accesses
dl1.hits                  160779495 # total number of hits
dl1.misses                   232768 # total number of misses
dl1.replacements             232256 # total number of replacements
dl1.writebacks               232256 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0014 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0014 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0014 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 705748 # total number of accesses
ul2.hits                     484759 # total number of hits
ul2.misses                   220989 # total number of misses
ul2.replacements             216893 # total number of replacements
ul2.writebacks               145158 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.3131 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.3073 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2057 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses            1460592501 # total number of accesses
itlb.hits                1460432403 # total number of hits
itlb.misses                  160098 # total number of misses
itlb.replacements            160034 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0001 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses             161012263 # total number of accesses
dtlb.hits                 160981586 # total number of hits
dtlb.misses                   30677 # total number of misses
dtlb.replacements             30549 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0002 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0002 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs         290241715 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x01200001e0 # program text (code) segment base
ld_text_size                3497740 # program text (code) size in bytes
ld_data_base           0x01204365a0 # program initialized data segment base
ld_data_size                   8952 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x0000000000 # program stack segment base (highest address in stack)
ld_stack_size            3766484992 # program initial stack size
ld_prog_entry          0x01200001e0 # program entry point (initial PC)
ld_environ_base        0x011f800000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 6052 # total number of pages allocated
mem.page_mem                 48416k # total size of memory pages allocated
mem.ptab_misses              165851 # total first level page table misses
mem.ptab_accesses       17348236754 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

